<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="257" />
    <option name="newTranslationDialogWidth" value="558" />
    <option name="newTranslationDialogX" value="600" />
    <option name="newTranslationDialogY" value="403" />
    <histories>
      <item value="schedule job log" />
      <item value="1532275150814212098" />
      <item value="estimate Return Time" />
      <item value="INTERVAL" />
      <item value="this" />
      <item value="Attributed String" />
      <item value="now Unit Id" />
      <item value="在信息级别记录一条消息" />
      <item value="An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value.&#10;This interface takes the place of the Dictionary class, which was a totally abstract class rather than an interface.&#10;The Map interface provides three collection views, which allow a map's contents to be viewed as a set of keys, collection of values, or set of key-value mappings. The order of a map is defined as the order in which the iterators on the map's collection views return their elements. Some map implementations, like the TreeMap class, make specific guarantees as to their order; others, like the HashMap class, do not.&#10;Note: great care must be exercised if mutable objects are used as map keys. The behavior of a map is not specified if the value of an object is changed in a manner that affects equals comparisons while the object is a key in the map. A special case of this prohibition is that it is not permissible for a map to contain itself as a key. While it is permissible for a map to contain itself as a value, extreme caution is advised: the equals and hashCode methods are no longer well defined on such a map.&#10;All general-purpose map implementation classes should provide two &quot;standard&quot; constructors: a void (no arguments) constructor which creates an empty map, and a constructor with a single argument of type Map, which creates a new map with the same key-value mappings as its argument. In effect, the latter constructor allows the user to copy any map, producing an equivalent map of the desired class. There is no way to enforce this recommendation (as interfaces cannot contain constructors) but all of the general-purpose map implementations in the JDK comply.&#10;The &quot;destructive&quot; methods contained in this interface, that is, the methods that modify the map on which they operate, are specified to throw UnsupportedOperationException if this map does not support the operation. If this is the case, these methods may, but are not required to, throw an UnsupportedOperationException if the invocation would have no effect on the map. For example, invoking the putAll(Map) method on an unmodifiable map may, but is not required to, throw the exception if the map whose mappings are to be &quot;superimposed&quot; is empty.&#10;Some map implementations have restrictions on the keys and values they may contain. For example, some implementations prohibit null keys and values, and some have restrictions on the types of their keys. Attempting to insert an ineligible key or value throws an unchecked exception, typically NullPointerException or ClassCastException. Attempting to query the presence of an ineligible key or value may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible key or value whose completion would not result in the insertion of an ineligible element into the map may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as &quot;optional&quot; in the specification for this interface.&#10;Many methods in Collections Framework interfaces are defined in terms of the equals method. For example, the specification for the containsKey(Object key) method says: &quot;returns true if and only if this map contains a mapping for a key k such that (key==null ? k==null : key.equals(k)).&quot; This specification should not be construed to imply that invoking Map.containsKey with a non-null argument key will cause key.equals(k) to be invoked for any key k. Implementations are free to implement optimizations whereby the equals invocation is avoided, for example, by first comparing the hash codes of the two keys. (The Object.hashCode() specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying Object methods wherever the implementor deems it appropriate.&#10;Some map operations which perform recursive traversal of the map may fail with an exception for self-referential instances where the map directly or indirectly contains itself. This includes the clone(), equals(), hashCode() and toString() methods. Implementations may optionally handle the self-referential scenario, however most current implementations do not do so.&#10;Unmodifiable Maps&#10;The Map.of, Map.ofEntries, and Map.copyOf static factory methods provide a convenient way to create unmodifiable maps. The Map instances created by these methods have the following characteristics:&#10;They are unmodifiable. Keys and values cannot be added, removed, or updated. Calling any mutator method on the Map will always cause UnsupportedOperationException to be thrown. However, if the contained keys or values are themselves mutable, this may cause the Map to behave inconsistently or its contents to appear to change.&#10;They disallow null keys and values. Attempts to create them with null keys or values result in NullPointerException.&#10;They are serializable if all keys and values are serializable.&#10;They reject duplicate keys at creation time. Duplicate keys passed to a static factory method result in IllegalArgumentException.&#10;The iteration order of mappings is unspecified and is subject to change.&#10;They are value-based. Programmers should treat instances that are equal as interchangeable and should not use them for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail. Callers should make no assumptions about the identity of the returned instances. Factories are free to create new instances or reuse existing ones.&#10;They are serialized as specified on the Serialized Form page." />
      <item value="Autowired" />
      <item value="maintenance List" />
      <item value="maintain Time Or Due Time" />
      <item value="This theme brings colors from the Xcode Dark theme to IntelliJ.  To install:&#10;Go to Settings (Preferences) | Plugins, find the theme plugin, and install it&#10;Restart the IDE&#10;Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and select Xcode-Dark in the Theme dropdow" />
      <item value="objectweb" />
      <item value="Power" />
      <item value="push Power Data To Client" />
      <item value="Response" />
      <item value="is Connected" />
      <item value="TelnetClient telnet = new TelnetClient();&#10;&#9;&#9;telnet.connect(ip, port);" />
      <item value="Returns the string representation of the telnet protocol command corresponding to the given command code." />
      <item value=" NOTE The range above incorrectly allows U+000B&#10;&#9;&#9;&#9;&#9; in addition to the HTML space characters; but&#10;&#9;&#9;&#9;&#9; that's not a problem in practice because HTML&#10;&#9;&#9;&#9;&#9; and XML parsers will both catch any U+000B&#10;&#9;&#9;&#9;&#9; and report an error for it before that pattern&#10;&#9;&#9;&#9;&#9; ever gets evaluated." />
      <item value="not Allowed" />
      <item value="detected dubious ownership in repository at 'D:git-workspacezhtj' To add an exception for this directory, call: git config --global --add safe.directory D:git-workspacezhtj Set the environment variable GIT_TEST_DEBUG_UNSAFE_DIRECTORIES=true and run again for more information." />
      <item value="11:44:27.179: [zhtj] git -c credential.helper= -c core.quotepath=false -c log.showSignature=false fetch origin --recurse-submodules=no --progress --prune&#10;fatal: detected dubious ownership in repository at 'D:git-workspacezhtj'&#10;To add an exception for this directory, call:&#10;&#9;git config --global --add safe.directory D:git-workspacezhtj&#10;Set the environment variable GIT_TEST_DEBUG_UNSAFE_DIRECTORIES=true and run&#10;again for more information." />
      <item value="test Compile" />
      <item value="set Wrap Text" />
      <item value="set Shrink To Fit" />
      <item value="set Font Height In Points" />
      <item value="Controls if the Cell should be auto-sized" />
      <item value="location Ref" />
      <item value="DEFAULT WINDOW SIZE" />
      <item value="is Write Key As Head" />
      <item value="Excel Reader" />
      <item value="Calibri" />
      <item value="Failed to bind properties under 'spring.datasource.type' to java.lang.Class&lt;javax.sql.DataSource&gt;:&#10;&#10;    Property: spring.datasource.type&#10;    Value: com.alibaba.druid.pool.DruidDataSource&#10;    Origin: class path resource [application.yml] - 8:11&#10;    Reason: failed to convert java.lang.String to java.lang.Class&lt;javax.sql.DataSource&gt; (caused by java.lang.ClassNotFoundException: com.alibaba.druid.pool.DruidDataSource)&#10;&#10;Action:&#10;&#10;Update your application's configuration" />
      <item value="The POM for com.alibaba:druid:jar:1.2.11 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details&#10;&#10;" />
      <item value="String" />
      <item value="Udp Listener" />
      <item value="close Device" />
      <item value="SAMEORIGIN" />
      <item value="nosniff" />
      <item value="array Find Str" />
      <item value="role Id List" />
      <item value=" nested exception is org.apache.ibatis.builder.BuilderException: The expression 'list' evaluated to a null value." />
      <item value="SYSTEM IN" />
      <item value="Handling" />
      <item value="save Batch Equip In" />
      <item value="expire Batch Equip" />
      <item value="save Batch Equip Out" />
      <item value="confirm Ex Warehouse" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="167" />
        <entry key="ENGLISH" value="143" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1658558872967" />
  </component>
  <component name="Settings">
    <option name="aliTranslateSettings">
      <app-key>
        <option name="appId" value="LTAI5tG4FQD7W2HgToiq6Qqz" />
      </app-key>
    </option>
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="ALI" />
  </component>
</application>